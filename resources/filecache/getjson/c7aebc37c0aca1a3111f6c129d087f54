{"in_reply_to_screen_name":"jarredsumner","in_reply_to_status_id_str":"1521878166016454656","in_reply_to_user_id_str":"2489440172","lang":"und","favorite_count":5,"self_thread":{"id_str":"1521878166016454656"},"created_at":"2022-05-04T15:43:25.000Z","display_text_range":[0,5],"entities":{"hashtags":[],"urls":[],"user_mentions":[],"symbols":[],"media":[{"display_url":"pic.twitter.com/GSRBDheJm0","expanded_url":"https://twitter.com/jarredsumner/status/1521878172005920768/photo/1","indices":[6,29],"url":"https://t.co/GSRBDheJm0"}]},"id_str":"1521878172005920768","text":"2 / 5 https://t.co/GSRBDheJm0","user":{"id_str":"2489440172","name":"Jarred Sumner","profile_image_url_https":"https://pbs.twimg.com/profile_images/1342417825483300864/Vz4ChOFG_normal.jpg","screen_name":"jarredsumner","verified":false},"photos":[{"accessibilityLabel":"he \"bun:ffi\" core module lets you efficiently call native libraries from JavaScript. It works with languages that support the C ABI (Zig, Rust, C/C++, C#, Nim, Kotlin, etc).\nGet the locally-installed SQLite version number:\n     import { dlopen, CString, ptr, suffix, FFIType } from \"bun:ffi\";\n     const sqlite3Path = process.env.SQLITE3_PATH || `libsqlite3.${suffix}`;\n     const {\n       symbols: { sqlite3_libversion },\n     } = dlopen(sqlite3Path, {\n       sqlite3_libversion: {\n         returns: \"cstring\",\n}, });\n     console.log(\"SQLite version\", sqlite3_libversion());\nFFI is really exciting because there is no runtime-specific code. You don't have to write a Bun FFI module (that isn't a thing). Use JavaScript to write bindings to native libraries installed with homebrew, with your linux distro's package manager or elsewhere. You can also write bindings to your own native code.\nFFI has a reputation of being slower than runtime-specific APIs like napi â€“ but that's not true for bun:ffi.","backgroundColor":{"red":204,"green":214,"blue":221},"cropCandidates":[{"x":0,"y":0,"w":2784,"h":1559},{"x":0,"y":0,"w":2784,"h":2784},{"x":0,"y":0,"w":2784,"h":3174},{"x":0,"y":0,"w":2048,"h":4096},{"x":0,"y":0,"w":2784,"h":4096}],"expandedUrl":"https://twitter.com/jarredsumner/status/1521878172005920768/photo/1","url":"https://pbs.twimg.com/media/FR7Jsd1VIAAvam5.jpg","width":2784,"height":4096}],"conversation_count":2,"news_action_type":"conversation","parent":{"lang":"en","reply_count":1,"retweet_count":2,"favorite_count":38,"self_thread":{"id_str":"1521878166016454656"},"created_at":"2022-05-04T15:43:24.000Z","display_text_range":[0,26],"entities":{"hashtags":[],"urls":[],"user_mentions":[],"symbols":[],"media":[{"display_url":"pic.twitter.com/jZRlzWRbeG","expanded_url":"https://twitter.com/jarredsumner/status/1521878166016454656/photo/1","indices":[27,50],"url":"https://t.co/jZRlzWRbeG"}]},"id_str":"1521878166016454656","text":"bun v0.0.79 is out!\n\n1 / 5 https://t.co/jZRlzWRbeG","user":{"id_str":"2489440172","name":"Jarred Sumner","profile_image_url_https":"https://pbs.twimg.com/profile_images/1342417825483300864/Vz4ChOFG_normal.jpg","screen_name":"jarredsumner","verified":false},"photos":[{"accessibilityLabel":"\n\"bun:ffi\" is a new bun.js core module that lets you use third-party native libraries written in languages that support the C ABI (Zig, Rust, C/C++ etc). It's like a foreign function interface API but faster\nBuffer (like in Node.js) is now a global, but the implementation is incomplete - see tracking issue. If you import \"buffer\", it continues to use the browser polyfill so this shouldn't be a breaking change\n2x faster TextEncoder & TextDecoder thanks to some fixes to the vectorization (SIMD) code\nFaster TypedArray.from. JavaScriptCore's implementation of TypedArray.from uses the code path for JS iterators when it could instead use an optimized code path for copying elements from an array, like V8 does. I have filed an upstream bug with WebKit about this, but I expect to do a more thorough fix for this in Bun and upstream that. For now, Bun reuses TypedArray.prototype.set when possible\n17x faster Uint8Array.fill\nBun.Transpiler gets an API for removing & replacing exports\nSHA512, SHA256","backgroundColor":{"red":204,"green":214,"blue":221},"cropCandidates":[{"x":0,"y":2181,"w":3420,"h":1915},{"x":0,"y":676,"w":3420,"h":3420},{"x":0,"y":197,"w":3420,"h":3899},{"x":1126,"y":0,"w":2048,"h":4096},{"x":0,"y":0,"w":3420,"h":4096}],"expandedUrl":"https://twitter.com/jarredsumner/status/1521878166016454656/photo/1","url":"https://pbs.twimg.com/media/FR7Jet5VEAEong2.jpg","width":3420,"height":4096}]}}